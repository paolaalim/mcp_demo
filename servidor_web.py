# servidor_web.py

# --- Imports ---
# Importamos FastMCP, a forma mais f√°cil de criar um servidor,
# e Context, para acessar funcionalidades internas do MCP.
from mcp.server.fastmcp import FastMCP, Context

# --- 1. Inicialize o Servidor ---
# Criamos uma inst√¢ncia do nosso servidor com um nome √∫nico.
# O par√¢metro 'stateless_http=True' √© importante! Ele configura o servidor
# para rodar em modo HTTP sem manter estado de sess√£o, ideal para deploy.
mcp = FastMCP("MeuServidorWeb", stateless_http=True)
print(f"Servidor MCP '{mcp.name}' configurado para rodar via HTTP.")


# --- 2. Defina um RESOURCE (Informa√ß√£o de Contexto) ---
# Resources fornecem contexto sobre o que seu servidor pode fazer.
# Usamos o decorador @mcp.resource com uma URI est√°tica.
@mcp.resource("meuServidorWeb://about")
def get_server_description() -> str:
    """
    Descreve o prop√≥sito e as ferramentas deste servidor.
    Esta informa√ß√£o √© lida pelo cliente MCP para entender as capacidades.
    """
    print("-> Resource 'meuServidorWeb://about' foi solicitado.")
    description = (
        "Ol√°! Eu sou um servidor MCP de exemplo, criado com o Parceiro de Programa√ß√£o.\n"
        "Minhas capacidades atuais incluem:\n"
        "1. **Sauda√ß√£o Personalizada:** Uma ferramenta que gera uma sauda√ß√£o para um nome espec√≠fico."
    )
    return description


# --- 3. Defina uma TOOL (A√ß√£o que a IA pode chamar) ---
# Tools s√£o as fun√ß√µes que a IA pode decidir executar para responder a um pedido.
# A docstring (o texto entre aspas triplas) √© MUITO importante, pois o LLM a usa
# para entender o que a ferramenta faz e quais s√£o seus par√¢metros.
@mcp.tool()
def saudacao_personalizada(nome: str, ctx: Context) -> str:
    """
    Gera uma mensagem de sauda√ß√£o calorosa para uma pessoa espec√≠fica.

    :param nome: O nome da pessoa a ser saudada.
    :param ctx: O objeto de contexto do MCP, usado aqui para logar informa√ß√µes.
    """
    # Usamos o logger do contexto para registrar o que est√° acontecendo.
    ctx.info(f"-> Ferramenta 'saudacao_personalizada' chamada com o nome: {nome}")
    
    resultado = f"Ol√°, {nome}! Que seu dia seja repleto de c√≥digo e sucesso! üöÄ"
    
    print(f"Resultado da ferramenta: {resultado}")
    return resultado


# --- 4. Bloco Principal de Execu√ß√£o ---
# Este bloco garante que o servidor s√≥ vai rodar quando executarmos o script diretamente.
if __name__ == "__main__":
    # Em vez de mcp.run(), usamos mcp.run(transport="streamable-http")
    # para iniciar o servidor no modo web, pronto para o deploy.
    print("Iniciando o servidor em modo HTTP. Use 'mcp dev servidor_web.py' para testar.")
    # A linha abaixo √© para execu√ß√£o direta, mas o modo 'dev' √© melhor para testes.
    # mcp.run(transport="streamable-http")
